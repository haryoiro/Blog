{"expireTime":9007200865784831000,"key":"gatsby-plugin-mdx-entire-payload-bfd4837c721c8e4901a79f26dd2f57d9-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"text","value":"原因は？","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":9,"offset":9},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":9,"offset":9},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"「port is already allocated」直訳すると「ポートはすでに割り当てられています」となり、\n起動しようとしているコンテナが使用するポートと他のプロセスが使っているポートが競合しています。","position":{"start":{"line":4,"column":1,"offset":11},"end":{"line":5,"column":48,"offset":114},"indent":[1]}}],"position":{"start":{"line":4,"column":1,"offset":11},"end":{"line":5,"column":48,"offset":114},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"ポートには一つにつき1プロセスしか割り当てられません。なので二つ目を割り当てようとするとエラーを履きます。","position":{"start":{"line":7,"column":1,"offset":116},"end":{"line":7,"column":54,"offset":169},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":116},"end":{"line":7,"column":54,"offset":169},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"対処法","position":{"start":{"line":10,"column":5,"offset":176},"end":{"line":10,"column":8,"offset":179},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":172},"end":{"line":10,"column":8,"offset":179},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"大体、以下の流れですすめていくと解決できます。","position":{"start":{"line":12,"column":1,"offset":181},"end":{"line":12,"column":24,"offset":204},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":181},"end":{"line":12,"column":24,"offset":204},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ポートがどのプロセスで使われているのかを調べる","position":{"start":{"line":14,"column":3,"offset":208},"end":{"line":14,"column":26,"offset":231},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":208},"end":{"line":14,"column":26,"offset":231},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":206},"end":{"line":14,"column":26,"offset":231},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"調べたものを元にプロセスを終了する","position":{"start":{"line":15,"column":3,"offset":234},"end":{"line":15,"column":20,"offset":251},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":234},"end":{"line":15,"column":20,"offset":251},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":232},"end":{"line":15,"column":20,"offset":251},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"プロセスが終了したかの確認","position":{"start":{"line":16,"column":3,"offset":254},"end":{"line":16,"column":16,"offset":267},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":254},"end":{"line":16,"column":16,"offset":267},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":252},"end":{"line":16,"column":16,"offset":267},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":206},"end":{"line":16,"column":16,"offset":267},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"順に説明します。","position":{"start":{"line":18,"column":1,"offset":269},"end":{"line":18,"column":9,"offset":277},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":269},"end":{"line":18,"column":9,"offset":277},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"ポートがどのプロセスで使われているのかを調べる","position":{"start":{"line":21,"column":5,"offset":284},"end":{"line":21,"column":28,"offset":307},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":280},"end":{"line":21,"column":28,"offset":307},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"特定のポートを使用しているプロセスはターミナルから確認可能です。\nPowerShellとBashでは使用するコマンドが異なります。対応したコマンドを参照してください。","position":{"start":{"line":23,"column":1,"offset":309},"end":{"line":24,"column":51,"offset":392},"indent":[1]}}],"position":{"start":{"line":23,"column":1,"offset":309},"end":{"line":24,"column":51,"offset":392},"indent":[1]}},{"type":"code","lang":"powershell","meta":null,"value":" netstart -ano | findstr :[port]","position":{"start":{"line":26,"column":1,"offset":394},"end":{"line":28,"column":4,"offset":444},"indent":[1,1]}},{"type":"code","lang":"bash","meta":null,"value":" lsof -i :[port]","position":{"start":{"line":30,"column":1,"offset":446},"end":{"line":32,"column":4,"offset":474},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"[port]","position":{"start":{"line":34,"column":1,"offset":476},"end":{"line":34,"column":9,"offset":484},"indent":[]}},{"type":"text","value":"には競合しているポートを入れます。","position":{"start":{"line":34,"column":9,"offset":484},"end":{"line":34,"column":26,"offset":501},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":476},"end":{"line":34,"column":26,"offset":501},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"port:80","position":{"start":{"line":36,"column":1,"offset":503},"end":{"line":36,"column":10,"offset":512},"indent":[]}},{"type":"text","value":"がどのプロセスに占有されているのか調べたい場合はこのようになります。","position":{"start":{"line":36,"column":10,"offset":512},"end":{"line":36,"column":44,"offset":546},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":503},"end":{"line":36,"column":44,"offset":546},"indent":[]}},{"type":"code","lang":"powershell","meta":null,"value":" netstart -ano | findstr :80","position":{"start":{"line":38,"column":1,"offset":548},"end":{"line":40,"column":4,"offset":594},"indent":[1,1]}},{"type":"code","lang":"bash","meta":null,"value":" lsof -i :80","position":{"start":{"line":42,"column":1,"offset":596},"end":{"line":44,"column":4,"offset":620},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"調べたものを元にプロセスを終了する","position":{"start":{"line":46,"column":5,"offset":626},"end":{"line":46,"column":22,"offset":643},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":622},"end":{"line":46,"column":22,"offset":643},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"プロセスにはPIDと言う一つ一つ異なる識別子が割り当てられており、プロセスを強制終了するにはこのPIDを使います。\n先程のコマンドでPIDが表示されるので、それをコピーしておきます。","position":{"start":{"line":48,"column":1,"offset":645},"end":{"line":49,"column":34,"offset":736},"indent":[1]}}],"position":{"start":{"line":48,"column":1,"offset":645},"end":{"line":49,"column":34,"offset":736},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"今回も同様にPowerShellとBashで使用するコマンドが異なります。以下のコマンドに先程コピーしたPIDを組み合わせて実行してください。","position":{"start":{"line":51,"column":1,"offset":738},"end":{"line":51,"column":72,"offset":809},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":738},"end":{"line":51,"column":72,"offset":809},"indent":[]}},{"type":"code","lang":"powershell","meta":null,"value":" tskill [PID]","position":{"start":{"line":53,"column":1,"offset":811},"end":{"line":55,"column":4,"offset":842},"indent":[1,1]}},{"type":"code","lang":"bash","meta":null,"value":" kill -9 [PID]","position":{"start":{"line":57,"column":1,"offset":844},"end":{"line":59,"column":4,"offset":870},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"プロセスが終了したかの確認","position":{"start":{"line":61,"column":5,"offset":876},"end":{"line":61,"column":18,"offset":889},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":872},"end":{"line":61,"column":18,"offset":889},"indent":[]}},{"type":"code","lang":"powershell","meta":null,"value":" netstart -ano | findstr :[port]","position":{"start":{"line":63,"column":1,"offset":891},"end":{"line":65,"column":4,"offset":941},"indent":[1,1]}},{"type":"code","lang":"bash","meta":null,"value":" lsof -i :[port]","position":{"start":{"line":67,"column":1,"offset":943},"end":{"line":69,"column":5,"offset":972},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"一つ目と同じ手順で確認できます。\nlsof or netstartを実行して何も表示されなければポートが使えるようになっているはずです。","position":{"start":{"line":71,"column":1,"offset":974},"end":{"line":72,"column":52,"offset":1042},"indent":[1]}}],"position":{"start":{"line":71,"column":1,"offset":974},"end":{"line":72,"column":52,"offset":1042},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"これでも使えない場合は","position":{"start":{"line":74,"column":1,"offset":1044},"end":{"line":74,"column":12,"offset":1055},"indent":[]}},{"type":"inlineCode","value":"Docker Compose","position":{"start":{"line":74,"column":12,"offset":1055},"end":{"line":74,"column":28,"offset":1071},"indent":[]}},{"type":"text","value":"の設定が不正など、実行ファイル側の問題である可能性があります。\nex. 異なるイメージが一つのポートにまとめてポートフォワードしている","position":{"start":{"line":74,"column":28,"offset":1071},"end":{"line":75,"column":36,"offset":1138},"indent":[1]}}],"position":{"start":{"line":74,"column":1,"offset":1044},"end":{"line":75,"column":36,"offset":1138},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Dockerだけの問題であればlsofやnetstartを使わずdocker psを使用するだけでいいかもしれません。","position":{"start":{"line":77,"column":1,"offset":1140},"end":{"line":77,"column":60,"offset":1199},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":1140},"end":{"line":77,"column":60,"offset":1199},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"ポートがかぶっているコンテナをストップ","position":{"start":{"line":79,"column":5,"offset":1205},"end":{"line":79,"column":24,"offset":1224},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":1201},"end":{"line":79,"column":24,"offset":1224},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"docker ps\ndocker stop [name]","position":{"start":{"line":81,"column":1,"offset":1226},"end":{"line":84,"column":4,"offset":1266},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"dockerのコンテナ一覧からPORTSがかぶっていそうなものを探してNAMEをコポー\n直接コンテナをストップ","position":{"start":{"line":86,"column":1,"offset":1268},"end":{"line":87,"column":12,"offset":1323},"indent":[1]}}],"position":{"start":{"line":86,"column":1,"offset":1268},"end":{"line":87,"column":12,"offset":1323},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"ポートがかぶっているプロセスを探して kill","position":{"start":{"line":89,"column":5,"offset":1329},"end":{"line":89,"column":28,"offset":1352},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":1325},"end":{"line":89,"column":28,"offset":1352},"indent":[]}},{"type":"code","lang":"bash","meta":null,"value":"lsof -i :[port]\nkill -9 [PID]","position":{"start":{"line":91,"column":1,"offset":1354},"end":{"line":94,"column":4,"offset":1395},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"ポートを占拠しているのがdockerだけとは限りません。\nlsofでポートを指定することで、そのポートを使っているプロセスを特定できます。\n特定できたらPIDをコピーしてプロセスをキルします。","position":{"start":{"line":96,"column":1,"offset":1397},"end":{"line":98,"column":27,"offset":1493},"indent":[1,1]}}],"position":{"start":{"line":96,"column":1,"offset":1397},"end":{"line":98,"column":27,"offset":1493},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"DockerComposeに「port is already allocated」と怒られたときにやること\",\"slug\":\"docker-compose-up-port-is-already-allocated-windows-linux\",\"date\":\"2020-12-29\",\"tags\":[\"docker\",\"linux\",\"windows\"],\"category\":\"docker\",\"wip\":false}","position":{"start":{"line":101,"column":1,"offset":1496},"end":{"line":101,"column":249,"offset":1744},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":101,"column":249,"offset":1744}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"DockerComposeに「port is already allocated」と怒られたときにやること\",\n  \"slug\": \"docker-compose-up-port-is-already-allocated-windows-linux\",\n  \"date\": \"2020-12-29\",\n  \"tags\": [\"docker\", \"linux\", \"windows\"],\n  \"category\": \"docker\",\n  \"wip\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"原因は？\"\n  }, \"\\u539F\\u56E0\\u306F\\uFF1F\"), mdx(\"p\", null, \"\\u300Cport is already allocated\\u300D\\u76F4\\u8A33\\u3059\\u308B\\u3068\\u300C\\u30DD\\u30FC\\u30C8\\u306F\\u3059\\u3067\\u306B\\u5272\\u308A\\u5F53\\u3066\\u3089\\u308C\\u3066\\u3044\\u307E\\u3059\\u300D\\u3068\\u306A\\u308A\\u3001\\n\\u8D77\\u52D5\\u3057\\u3088\\u3046\\u3068\\u3057\\u3066\\u3044\\u308B\\u30B3\\u30F3\\u30C6\\u30CA\\u304C\\u4F7F\\u7528\\u3059\\u308B\\u30DD\\u30FC\\u30C8\\u3068\\u4ED6\\u306E\\u30D7\\u30ED\\u30BB\\u30B9\\u304C\\u4F7F\\u3063\\u3066\\u3044\\u308B\\u30DD\\u30FC\\u30C8\\u304C\\u7AF6\\u5408\\u3057\\u3066\\u3044\\u307E\\u3059\\u3002\"), mdx(\"p\", null, \"\\u30DD\\u30FC\\u30C8\\u306B\\u306F\\u4E00\\u3064\\u306B\\u3064\\u304D1\\u30D7\\u30ED\\u30BB\\u30B9\\u3057\\u304B\\u5272\\u308A\\u5F53\\u3066\\u3089\\u308C\\u307E\\u305B\\u3093\\u3002\\u306A\\u306E\\u3067\\u4E8C\\u3064\\u76EE\\u3092\\u5272\\u308A\\u5F53\\u3066\\u3088\\u3046\\u3068\\u3059\\u308B\\u3068\\u30A8\\u30E9\\u30FC\\u3092\\u5C65\\u304D\\u307E\\u3059\\u3002\"), mdx(\"h3\", {\n    \"id\": \"対処法\"\n  }, \"\\u5BFE\\u51E6\\u6CD5\"), mdx(\"p\", null, \"\\u5927\\u4F53\\u3001\\u4EE5\\u4E0B\\u306E\\u6D41\\u308C\\u3067\\u3059\\u3059\\u3081\\u3066\\u3044\\u304F\\u3068\\u89E3\\u6C7A\\u3067\\u304D\\u307E\\u3059\\u3002\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30DD\\u30FC\\u30C8\\u304C\\u3069\\u306E\\u30D7\\u30ED\\u30BB\\u30B9\\u3067\\u4F7F\\u308F\\u308C\\u3066\\u3044\\u308B\\u306E\\u304B\\u3092\\u8ABF\\u3079\\u308B\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u8ABF\\u3079\\u305F\\u3082\\u306E\\u3092\\u5143\\u306B\\u30D7\\u30ED\\u30BB\\u30B9\\u3092\\u7D42\\u4E86\\u3059\\u308B\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30D7\\u30ED\\u30BB\\u30B9\\u304C\\u7D42\\u4E86\\u3057\\u305F\\u304B\\u306E\\u78BA\\u8A8D\")), mdx(\"p\", null, \"\\u9806\\u306B\\u8AAC\\u660E\\u3057\\u307E\\u3059\\u3002\"), mdx(\"h3\", {\n    \"id\": \"ポートがどのプロセスで使われているのかを調べる\"\n  }, \"\\u30DD\\u30FC\\u30C8\\u304C\\u3069\\u306E\\u30D7\\u30ED\\u30BB\\u30B9\\u3067\\u4F7F\\u308F\\u308C\\u3066\\u3044\\u308B\\u306E\\u304B\\u3092\\u8ABF\\u3079\\u308B\"), mdx(\"p\", null, \"\\u7279\\u5B9A\\u306E\\u30DD\\u30FC\\u30C8\\u3092\\u4F7F\\u7528\\u3057\\u3066\\u3044\\u308B\\u30D7\\u30ED\\u30BB\\u30B9\\u306F\\u30BF\\u30FC\\u30DF\\u30CA\\u30EB\\u304B\\u3089\\u78BA\\u8A8D\\u53EF\\u80FD\\u3067\\u3059\\u3002\\nPowerShell\\u3068Bash\\u3067\\u306F\\u4F7F\\u7528\\u3059\\u308B\\u30B3\\u30DE\\u30F3\\u30C9\\u304C\\u7570\\u306A\\u308A\\u307E\\u3059\\u3002\\u5BFE\\u5FDC\\u3057\\u305F\\u30B3\\u30DE\\u30F3\\u30C9\\u3092\\u53C2\\u7167\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"powershell\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-powershell\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-powershell\"\n  }), \" netstart \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"-\"), \"ano \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"|\"), \" findstr :\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token namespace\"\n  }), \"[port]\")))), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"lsof\"), \" -i :\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"port\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\")))), mdx(\"p\", null, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"[port]\"), \"\\u306B\\u306F\\u7AF6\\u5408\\u3057\\u3066\\u3044\\u308B\\u30DD\\u30FC\\u30C8\\u3092\\u5165\\u308C\\u307E\\u3059\\u3002\"), mdx(\"p\", null, mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"port:80\"), \"\\u304C\\u3069\\u306E\\u30D7\\u30ED\\u30BB\\u30B9\\u306B\\u5360\\u6709\\u3055\\u308C\\u3066\\u3044\\u308B\\u306E\\u304B\\u8ABF\\u3079\\u305F\\u3044\\u5834\\u5408\\u306F\\u3053\\u306E\\u3088\\u3046\\u306B\\u306A\\u308A\\u307E\\u3059\\u3002\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"powershell\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-powershell\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-powershell\"\n  }), \" netstart \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"-\"), \"ano \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"|\"), \" findstr :80\"))), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"lsof\"), \" -i :80\"))), mdx(\"h3\", {\n    \"id\": \"調べたものを元にプロセスを終了する\"\n  }, \"\\u8ABF\\u3079\\u305F\\u3082\\u306E\\u3092\\u5143\\u306B\\u30D7\\u30ED\\u30BB\\u30B9\\u3092\\u7D42\\u4E86\\u3059\\u308B\"), mdx(\"p\", null, \"\\u30D7\\u30ED\\u30BB\\u30B9\\u306B\\u306FPID\\u3068\\u8A00\\u3046\\u4E00\\u3064\\u4E00\\u3064\\u7570\\u306A\\u308B\\u8B58\\u5225\\u5B50\\u304C\\u5272\\u308A\\u5F53\\u3066\\u3089\\u308C\\u3066\\u304A\\u308A\\u3001\\u30D7\\u30ED\\u30BB\\u30B9\\u3092\\u5F37\\u5236\\u7D42\\u4E86\\u3059\\u308B\\u306B\\u306F\\u3053\\u306EPID\\u3092\\u4F7F\\u3044\\u307E\\u3059\\u3002\\n\\u5148\\u7A0B\\u306E\\u30B3\\u30DE\\u30F3\\u30C9\\u3067PID\\u304C\\u8868\\u793A\\u3055\\u308C\\u308B\\u306E\\u3067\\u3001\\u305D\\u308C\\u3092\\u30B3\\u30D4\\u30FC\\u3057\\u3066\\u304A\\u304D\\u307E\\u3059\\u3002\"), mdx(\"p\", null, \"\\u4ECA\\u56DE\\u3082\\u540C\\u69D8\\u306BPowerShell\\u3068Bash\\u3067\\u4F7F\\u7528\\u3059\\u308B\\u30B3\\u30DE\\u30F3\\u30C9\\u304C\\u7570\\u306A\\u308A\\u307E\\u3059\\u3002\\u4EE5\\u4E0B\\u306E\\u30B3\\u30DE\\u30F3\\u30C9\\u306B\\u5148\\u7A0B\\u30B3\\u30D4\\u30FC\\u3057\\u305FPID\\u3092\\u7D44\\u307F\\u5408\\u308F\\u305B\\u3066\\u5B9F\\u884C\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"powershell\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-powershell\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-powershell\"\n  }), \" tskill \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token namespace\"\n  }), \"[PID]\")))), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"kill\"), \" -9 \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"PID\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\")))), mdx(\"h3\", {\n    \"id\": \"プロセスが終了したかの確認\"\n  }, \"\\u30D7\\u30ED\\u30BB\\u30B9\\u304C\\u7D42\\u4E86\\u3057\\u305F\\u304B\\u306E\\u78BA\\u8A8D\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"powershell\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-powershell\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-powershell\"\n  }), \" netstart \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"-\"), \"ano \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"|\"), \" findstr :\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token namespace\"\n  }), \"[port]\")))), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"lsof\"), \" -i :\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"port\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\")))), mdx(\"p\", null, \"\\u4E00\\u3064\\u76EE\\u3068\\u540C\\u3058\\u624B\\u9806\\u3067\\u78BA\\u8A8D\\u3067\\u304D\\u307E\\u3059\\u3002\\nlsof or netstart\\u3092\\u5B9F\\u884C\\u3057\\u3066\\u4F55\\u3082\\u8868\\u793A\\u3055\\u308C\\u306A\\u3051\\u308C\\u3070\\u30DD\\u30FC\\u30C8\\u304C\\u4F7F\\u3048\\u308B\\u3088\\u3046\\u306B\\u306A\\u3063\\u3066\\u3044\\u308B\\u306F\\u305A\\u3067\\u3059\\u3002\"), mdx(\"p\", null, \"\\u3053\\u308C\\u3067\\u3082\\u4F7F\\u3048\\u306A\\u3044\\u5834\\u5408\\u306F\", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"Docker Compose\"), \"\\u306E\\u8A2D\\u5B9A\\u304C\\u4E0D\\u6B63\\u306A\\u3069\\u3001\\u5B9F\\u884C\\u30D5\\u30A1\\u30A4\\u30EB\\u5074\\u306E\\u554F\\u984C\\u3067\\u3042\\u308B\\u53EF\\u80FD\\u6027\\u304C\\u3042\\u308A\\u307E\\u3059\\u3002\\nex. \\u7570\\u306A\\u308B\\u30A4\\u30E1\\u30FC\\u30B8\\u304C\\u4E00\\u3064\\u306E\\u30DD\\u30FC\\u30C8\\u306B\\u307E\\u3068\\u3081\\u3066\\u30DD\\u30FC\\u30C8\\u30D5\\u30A9\\u30EF\\u30FC\\u30C9\\u3057\\u3066\\u3044\\u308B\"), mdx(\"p\", null, \"Docker\\u3060\\u3051\\u306E\\u554F\\u984C\\u3067\\u3042\\u308C\\u3070lsof\\u3084netstart\\u3092\\u4F7F\\u308F\\u305Adocker ps\\u3092\\u4F7F\\u7528\\u3059\\u308B\\u3060\\u3051\\u3067\\u3044\\u3044\\u304B\\u3082\\u3057\\u308C\\u307E\\u305B\\u3093\\u3002\"), mdx(\"h3\", {\n    \"id\": \"ポートがかぶっているコンテナをストップ\"\n  }, \"\\u30DD\\u30FC\\u30C8\\u304C\\u304B\\u3076\\u3063\\u3066\\u3044\\u308B\\u30B3\\u30F3\\u30C6\\u30CA\\u3092\\u30B9\\u30C8\\u30C3\\u30D7\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"ps\"), \"\\ndocker stop \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"name\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\")))), mdx(\"p\", null, \"docker\\u306E\\u30B3\\u30F3\\u30C6\\u30CA\\u4E00\\u89A7\\u304B\\u3089PORTS\\u304C\\u304B\\u3076\\u3063\\u3066\\u3044\\u305D\\u3046\\u306A\\u3082\\u306E\\u3092\\u63A2\\u3057\\u3066NAME\\u3092\\u30B3\\u30DD\\u30FC\\n\\u76F4\\u63A5\\u30B3\\u30F3\\u30C6\\u30CA\\u3092\\u30B9\\u30C8\\u30C3\\u30D7\"), mdx(\"h3\", {\n    \"id\": \"ポートがかぶっているプロセスを探して-kill\"\n  }, \"\\u30DD\\u30FC\\u30C8\\u304C\\u304B\\u3076\\u3063\\u3066\\u3044\\u308B\\u30D7\\u30ED\\u30BB\\u30B9\\u3092\\u63A2\\u3057\\u3066 kill\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"lsof\"), \" -i :\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"port\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token function\"\n  }), \"kill\"), \" -9 \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"[\"), \"PID\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \"]\")))), mdx(\"p\", null, \"\\u30DD\\u30FC\\u30C8\\u3092\\u5360\\u62E0\\u3057\\u3066\\u3044\\u308B\\u306E\\u304Cdocker\\u3060\\u3051\\u3068\\u306F\\u9650\\u308A\\u307E\\u305B\\u3093\\u3002\\nlsof\\u3067\\u30DD\\u30FC\\u30C8\\u3092\\u6307\\u5B9A\\u3059\\u308B\\u3053\\u3068\\u3067\\u3001\\u305D\\u306E\\u30DD\\u30FC\\u30C8\\u3092\\u4F7F\\u3063\\u3066\\u3044\\u308B\\u30D7\\u30ED\\u30BB\\u30B9\\u3092\\u7279\\u5B9A\\u3067\\u304D\\u307E\\u3059\\u3002\\n\\u7279\\u5B9A\\u3067\\u304D\\u305F\\u3089PID\\u3092\\u30B3\\u30D4\\u30FC\\u3057\\u3066\\u30D7\\u30ED\\u30BB\\u30B9\\u3092\\u30AD\\u30EB\\u3057\\u307E\\u3059\\u3002\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"DockerComposeに「port is already allocated」と怒られたときにやること\",\n  \"slug\": \"docker-compose-up-port-is-already-allocated-windows-linux\",\n  \"date\": \"2020-12-29\",\n  \"tags\": [\"docker\", \"linux\", \"windows\"],\n  \"category\": \"docker\",\n  \"wip\": false\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h3 {...{\n      \"id\": \"原因は？\"\n    }}>{`原因は？`}</h3>\n    <p>{`「port is already allocated」直訳すると「ポートはすでに割り当てられています」となり、\n起動しようとしているコンテナが使用するポートと他のプロセスが使っているポートが競合しています。`}</p>\n    <p>{`ポートには一つにつき1プロセスしか割り当てられません。なので二つ目を割り当てようとするとエラーを履きます。`}</p>\n    <h3 {...{\n      \"id\": \"対処法\"\n    }}>{`対処法`}</h3>\n    <p>{`大体、以下の流れですすめていくと解決できます。`}</p>\n    <ul>\n      <li parentName=\"ul\">{`ポートがどのプロセスで使われているのかを調べる`}</li>\n      <li parentName=\"ul\">{`調べたものを元にプロセスを終了する`}</li>\n      <li parentName=\"ul\">{`プロセスが終了したかの確認`}</li>\n    </ul>\n    <p>{`順に説明します。`}</p>\n    <h3 {...{\n      \"id\": \"ポートがどのプロセスで使われているのかを調べる\"\n    }}>{`ポートがどのプロセスで使われているのかを調べる`}</h3>\n    <p>{`特定のポートを使用しているプロセスはターミナルから確認可能です。\nPowerShellとBashでは使用するコマンドが異なります。対応したコマンドを参照してください。`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"powershell\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-powershell\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-powershell\"\n        }}>{` netstart `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`-`}</span>{`ano `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`|`}</span>{` findstr :`}<span parentName=\"code\" {...{\n            \"className\": \"token namespace\"\n          }}>{`[port]`}</span></code></pre></div>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-bash\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`lsof`}</span>{` -i :`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`[`}</span>{`port`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`]`}</span></code></pre></div>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[port]`}</code>{`には競合しているポートを入れます。`}</p>\n    <p><code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`port:80`}</code>{`がどのプロセスに占有されているのか調べたい場合はこのようになります。`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"powershell\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-powershell\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-powershell\"\n        }}>{` netstart `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`-`}</span>{`ano `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`|`}</span>{` findstr :80`}</code></pre></div>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-bash\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`lsof`}</span>{` -i :80`}</code></pre></div>\n    <h3 {...{\n      \"id\": \"調べたものを元にプロセスを終了する\"\n    }}>{`調べたものを元にプロセスを終了する`}</h3>\n    <p>{`プロセスにはPIDと言う一つ一つ異なる識別子が割り当てられており、プロセスを強制終了するにはこのPIDを使います。\n先程のコマンドでPIDが表示されるので、それをコピーしておきます。`}</p>\n    <p>{`今回も同様にPowerShellとBashで使用するコマンドが異なります。以下のコマンドに先程コピーしたPIDを組み合わせて実行してください。`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"powershell\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-powershell\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-powershell\"\n        }}>{` tskill `}<span parentName=\"code\" {...{\n            \"className\": \"token namespace\"\n          }}>{`[PID]`}</span></code></pre></div>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-bash\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`kill`}</span>{` -9 `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`[`}</span>{`PID`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`]`}</span></code></pre></div>\n    <h3 {...{\n      \"id\": \"プロセスが終了したかの確認\"\n    }}>{`プロセスが終了したかの確認`}</h3>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"powershell\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-powershell\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-powershell\"\n        }}>{` netstart `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`-`}</span>{`ano `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`|`}</span>{` findstr :`}<span parentName=\"code\" {...{\n            \"className\": \"token namespace\"\n          }}>{`[port]`}</span></code></pre></div>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-bash\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`lsof`}</span>{` -i :`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`[`}</span>{`port`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`]`}</span></code></pre></div>\n    <p>{`一つ目と同じ手順で確認できます。\nlsof or netstartを実行して何も表示されなければポートが使えるようになっているはずです。`}</p>\n    <p>{`これでも使えない場合は`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Docker Compose`}</code>{`の設定が不正など、実行ファイル側の問題である可能性があります。\nex. 異なるイメージが一つのポートにまとめてポートフォワードしている`}</p>\n    <p>{`Dockerだけの問題であればlsofやnetstartを使わずdocker psを使用するだけでいいかもしれません。`}</p>\n    <h3 {...{\n      \"id\": \"ポートがかぶっているコンテナをストップ\"\n    }}>{`ポートがかぶっているコンテナをストップ`}</h3>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-bash\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}>{`docker `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`ps`}</span>{`\ndocker stop `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`[`}</span>{`name`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`]`}</span></code></pre></div>\n    <p>{`dockerのコンテナ一覧からPORTSがかぶっていそうなものを探してNAMEをコポー\n直接コンテナをストップ`}</p>\n    <h3 {...{\n      \"id\": \"ポートがかぶっているプロセスを探して-kill\"\n    }}>{`ポートがかぶっているプロセスを探して kill`}</h3>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"bash\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-bash\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-bash\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`lsof`}</span>{` -i :`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`[`}</span>{`port`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`]`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`kill`}</span>{` -9 `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`[`}</span>{`PID`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`]`}</span></code></pre></div>\n    <p>{`ポートを占拠しているのがdockerだけとは限りません。\nlsofでポートを指定することで、そのポートを使っているプロセスを特定できます。\n特定できたらPIDをコピーしてプロセスをキルします。`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}